
CREATE TABLE Customers (
    customer_id INT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    location VARCHAR(255)
);

CREATE TABLE Orders (
    order_id INT PRIMARY KEY,
    customer_id INT,
    order_date DATE,
    total_amount DECIMAL(10, 2),
    FOREIGN KEY (customer_id) REFERENCES Customers(customer_id)
);

CREATE TABLE Products (
    product_id INT PRIMARY KEY,
    name VARCHAR(255),
    description TEXT,
    price DECIMAL(10, 2)
);

CREATE TABLE Categories (
    category_id INT PRIMARY KEY,
    name VARCHAR(255)
);

CREATE TABLE Order_Items (
    order_item_id INT PRIMARY KEY,
    order_id INT,
    product_id INT,
    quantity INT,
    unit_price DECIMAL(10, 2),
    FOREIGN KEY (order_id) REFERENCES Orders(order_id),
    FOREIGN KEY (product_id) REFERENCES Products(product_id)
);

INSERT INTO Customers (customer_id, name, email, location)
VALUES
    (1, 'Customer A', 'customerA@email.com', 'Location A'),
    (2, 'Customer B', 'customerB@email.com', 'Location B'),
    (3, 'Customer C', 'customerC@email.com', 'Location C');

INSERT INTO Orders (order_id, customer_id, order_date, total_amount)
VALUES
    (1, 1, '2023-01-01', 100.00),
    (2, 1, '2023-01-05', 50.00),
    (3, 2, '2023-01-02', 75.00),
    (4, 3, '2023-01-03', 120.00);

INSERT INTO Products (product_id, name, description, price)
VALUES
    (1, 'Product 1', 'Description 1', 10.00),
    (2, 'Product 2', 'Description 2', 20.00),
    (3, 'Product 3', 'Description 3', 15.00),
    (4, 'Product 4', 'Description 4', 30.00);


INSERT INTO Categories (category_id, name)
VALUES
    (1, 'Category X'),
    (2, 'Category Y');


INSERT INTO Order_Items (order_item_id, order_id, product_id, quantity, unit_price)
VALUES
    (1, 1, 1, 3, 10.00),
    (2, 1, 2, 2, 20.00),
    (3, 2, 3, 4, 15.00),
    (4, 3, 2, 5, 20.00);

-- Task 1: Retrieve customer information along with the total number of orders

SELECT c.name AS customer_name, COUNT(o.order_id) AS total_orders
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.name
ORDER BY total_orders DESC;

-- Task 2: Retrieve product name, quantity, and total amount for each order item

SELECT p.name AS product_name, oi.quantity, (oi.quantity * oi.unit_price) AS total_amount
FROM Products p
INNER JOIN Order_Items oi ON p.product_id = oi.product_id
ORDER BY oi.order_id ASC;


-- Task 3: Retrieve total revenue generated by each product category

SELECT c.name AS category_name, SUM(oi.quantity * oi.unit_price) AS total_revenue
FROM Categories c
LEFT JOIN Products p ON c.category_id = p.category_id
LEFT JOIN Order_Items oi ON p.product_id = oi.product_id
GROUP BY c.category_id, c.name
ORDER BY total_revenue DESC;

-- Task 4: Retrieve the top 5 customers with the highest total purchase amount

SELECT c.name AS customer_name, SUM(oi.quantity * oi.unit_price) AS total_purchase_amount
FROM Customers c
LEFT JOIN Orders o ON c.customer_id = o.customer_id
LEFT JOIN Order_Items oi ON o.order_id = oi.order_id
GROUP BY c.customer_id, c.name
ORDER BY total_purchase_amount DESC
LIMIT 5;
